<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>eigen_quadprog_api.h</name>
    <path>/home/runner/work/eigen-quadprog/eigen-quadprog/src/</path>
    <filename>a00008</filename>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_QUADPROG_DLLIMPORT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4ab92202f9a7824f189014cb881bb2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_QUADPROG_DLLEXPORT</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a93be7b5ce7b375e2ae901c23745b3b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_QUADPROG_API</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0af7c80014d34bf21d4761e99e292ebd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuadProg.h</name>
    <path>/home/runner/work/eigen-quadprog/eigen-quadprog/src/</path>
    <filename>a00011</filename>
    <includes id="a00008" name="eigen_quadprog_api.h" local="yes" imported="no">eigen_quadprog_api.h</includes>
    <class kind="class">Eigen::QuadProgCommon</class>
    <class kind="class">Eigen::QuadProgDense</class>
    <class kind="class">Eigen::QuadProgSparse</class>
    <namespace>Eigen</namespace>
    <member kind="function">
      <type>int</type>
      <name>qpgen1_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5de6a01bef47f841b3657c5e2d3c42c4</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, const int *iamat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>qpgen2_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a9bc2322f12c41652d5595e5ef8ef4f</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuadProgCommon</name>
    <filename>a00563.html</filename>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgCommon</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ac7a006b9cb25fc5c1fa27d45bb78bdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API const VectorXi &amp;</type>
      <name>iter</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>af451489e15582d42e990a046617adccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API int</type>
      <name>fail</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ac1ada17582501b660f8d465da97e2cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API const VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a1f9c37ae16afaa7cac4c7e6d7217440e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>problem</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a50ec363cf204e14bd48c5c08fc4c355e</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillQCBf</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>af15daabc164fc6503503b610bd7701c7</anchor>
      <arglist>(int nreq, int nrineq, const MatrixXd &amp;Q, const VectorXd &amp;C, const VectorXd &amp;Beq, const VectorXd &amp;Bineq, bool isDecomp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixXd</type>
      <name>Q_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ade6b3b7402c19d572f55a18f79c8d212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>C_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a1bba257a7b60e275170b8161c9f006d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>B_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>ae24d5447291adda64a0041495a39f649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>X_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a1e06bde9844925415c948f37f2825608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fail_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a1d4085fb41d156e4ec64a7ab2a6a608e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXi</type>
      <name>iact_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a38047d0bf3c7714c261ee28ff0dd66c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXi</type>
      <name>iter_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a9ef3ffe3c720df3e70b4beaa9713e132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorXd</type>
      <name>work_</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>a57f15a96f84d1e74303eaa18771dc6dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuadProgDense</name>
    <filename>a00567.html</filename>
    <base>Eigen::QuadProgCommon</base>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgDense</name>
      <anchorfile>a00567.html</anchorfile>
      <anchor>af69191d271c49086c0e05086f6899c29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgDense</name>
      <anchorfile>a00567.html</anchorfile>
      <anchor>a6395fd3fc28d3bd997e4c9a4a2a17a82</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>problem</name>
      <anchorfile>a00567.html</anchorfile>
      <anchor>a28383450c7cca32223ff02ed0129692d</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API bool</type>
      <name>solve</name>
      <anchorfile>a00567.html</anchorfile>
      <anchor>ad3118d5264d164b4b5948f43cd03c4e2</anchor>
      <arglist>(const MatrixXd &amp;Q, const VectorXd &amp;C, const MatrixXd &amp;Aeq, const VectorXd &amp;Beq, const MatrixXd &amp;Aineq, const VectorXd &amp;Bineq, bool isDecomp=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuadProgSparse</name>
    <filename>a00571.html</filename>
    <base>Eigen::QuadProgCommon</base>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgSparse</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>a20557d201a5862329863f24d13ebea55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API</type>
      <name>QuadProgSparse</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>afe7edd184831041f1fe7c8f05e984a97</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API void</type>
      <name>problem</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>aec7c28073dbc7988f465d198ad8cf56b</anchor>
      <arglist>(int nrvar, int nreq, int nrineq)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_QUADPROG_API bool</type>
      <name>solve</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>a12aa8c5b35c6a490dcadf41fa9f3b8f4</anchor>
      <arglist>(const MatrixXd &amp;Q, const VectorXd &amp;C, const SparseMatrix&lt; double &gt; &amp;Aeq, const VectorXd &amp;Beq, const SparseMatrix&lt; double &gt; &amp;Aineq, const VectorXd &amp;Bineq, bool isDecomp=false)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>a00015.html</filename>
    <class kind="class">Eigen::QuadProgCommon</class>
    <class kind="class">Eigen::QuadProgDense</class>
    <class kind="class">Eigen::QuadProgSparse</class>
    <member kind="function">
      <type>int</type>
      <name>qpgen1_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5de6a01bef47f841b3657c5e2d3c42c4</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, const int *iamat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>qpgen2_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a9bc2322f12c41652d5595e5ef8ef4f</anchor>
      <arglist>(double *dmat, double *dvec, const int *fddmat, const int *n, double *sol, double *crval, double *amat, double *bvec, const int *fdamat, const int *q, const int *meq, int *iact, int *nact, int *iter, double *work, const int *ierr)</arglist>
    </member>
  </compound>
</tagfile>
